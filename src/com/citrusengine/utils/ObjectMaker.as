package com.citrusengine.utils{	import com.citrusengine.core.CitrusEngine;	import com.citrusengine.core.CitrusObject;		import flash.display.MovieClip;	import flash.utils.getDefinitionByName;		/**	 * The ObjectMaker is a factory utility class for quickly and easily batch-creating a bunch of CitrusObjects.	 * Usually the ObjectMaker is used if you laid out your level in a level editor or an XML file.	 * Pass in your layout object (SWF, XML, or whatever else is supported in the future) to the appropriate method,	 * and the method will return an array of created CitrusObjects.	 * 	 * <p>The methods within the ObjectMaker should be called according to what kind of layout file that was created	 * by your level editor.</p>	 */		public class ObjectMaker	{		public function ObjectMaker()		{		}				/**		 * You can pass a custom-created MovieClip object into this method to auto-create CitrusObjects.		 * This method looks at all the children of the MovieClip you passed in, and creates a CitrusObject with the		 * x, y, width, height, name, and rotation of the of MovieClip.		 * 		 * <p>In order for this to properly create a CitrusObject from a MovieClip, the MovieClip needs to have a variable		 * called <code>classPath</code> on it, which will provide, in String form, the full		 * package and class name of the Citrus Object that it is supposed to create (such as "myGame.MyHero"). You can specify		 * this in frame 1 of the MovieClip asset in Flash.</p>		 * 		 * <p>You can also initialize your CitrusObject's parameters by creating a "params" variable (of type Object)		 * on your MovieClip. The "params" object will be passed into the newly created CitrusObject.</p>		 * 		 * <p>So, within the first frame of each child-MovieClip of the "layout" MovieClip,		 * you should specify something like the following:</p>		 * 		 * <p><code>var classPath="com.citrusEngine.objects.platformer.Hero";</code></p>		 * 		 * <p><code>var params={view: "Patch.swf", jumpHeight: 14};</code></p>		 */				public static function FromMovieClip(mc:MovieClip, addToCurrentState:Boolean = true):Array		{			var a:Array = [];			var n:Number = mc.numChildren;			var child:MovieClip;			for (var i:int = 0; i < n; i++)			{				child = mc.getChildAt(i) as MovieClip;				if (child)				{					if (!child.className)						continue;										var objectClass:Class = getDefinitionByName(child.className) as Class;					var params:Object = {};										if (child.params)						params = child.params;										params.x = child.x;					params.y = child.y;										//We need to unrotate the object to get its true width/height. Then rotate it back.					var rotation:Number = child.rotation;					child.rotation = 0;					params.width = child.width;					params.height = child.height;					child.rotation = rotation;										params.rotation = child.rotation;										var object:CitrusObject = new objectClass(child.name, params);					a.push(object);				}			}						if (addToCurrentState)			{				var ce:CitrusEngine = CitrusEngine.getInstance();				for each (object in a) ce.state.add(object);			}						return a;		}				/**		 * This batch-creates CitrusObjects from an XML file generated by the level editor GLEED2D. If you would like to 		 * use GLEED2D as a level editor for your Citrus Engine game, call this function to parse your GLEED2D level.		 * 		 * <p>When using GLEED2D, there are a few things to note:		 * <ul>		 * <li> You must add a custom property named 'className' for each object you make, unless it will be of the type		 * specified in the <code>defaultClassName</code> parameter. Assign this property a value		 * that represents the class that you want that object to be. For example, if you wanted to make a hero, you must		 * give your GLEED2D Hero 'className' property the value 'com.citrusengine.objects.platformer.Hero'. Don't forget		 * to include the package, or the Citrus Engine won't be able to make your object.</li>		 * <li> You can shift-click and drag to duplicate GLEED2D objects. This is the easiest way to copy an entire object,		 * custom-properties and all.</li>		 * <li> Unfortunately, GLEED2D does not support rotating the Rectangle Primitive, this makes GLEED2D difficult to use		 * if you plan on using it to layout levels for a platformer with hills. You can, however, specify a custom property		 * named "rotation", which will work in Citrus Engine, but not be reflected in GLEED2D.</li>		 * <li> GLEED2D does not support SWFs as textures, so any CitrusObjects that will use SWFs as their view should		 * be created via a GLEED2D rectangle primitive, then specify the SWF path or MovieClip class name using a custom		 * property named 'view'.		 * </li>		 * </ul>		 * </p>		 * 		 * @param levelXML An XML level object created by GLEED2D.		 * @param addToCurrentState Automatically adds all CitrusObjects that get created to the current state.		 * @param layerIndexProperty Gleed's layer indexes will be assigned to the specified property.		 * @param defaultClassName If a className custom property is not specified on a GLEED2D asset, this is the default CitrusObject class that gets created.		 * @return An array of CitrusObjects. If the <code>addToCurrentState</code> property is false, you will still need to add these to the state.		 * 		 */				public static function FromGleed(levelXML:XML,										 addToCurrentState:Boolean = true,										 layerIndexProperty:String="group",										 defaultClassName:String="com.citrusengine.objects.CitrusSprite"):Array		{			var layerIndex:uint = 0;			var items:Array = [];			var object:Object;			var objectName:String;			var ce:CitrusEngine = CitrusEngine.getInstance();			for each (var layerXML:XML in levelXML.Layers.Layer) //Loop through all layers			{				for each (var itemXML:XML in layerXML.Items.Item) //Loop through all items on a layer				{					//Grab the XML properties we want off of the item node.					objectName = itemXML.@Name.toString();					var x:Number = itemXML.Position.X.toString(); //Top for primitives, center for textures					var y:Number = itemXML.Position.Y.toString(); //Left for primitives, center for textures										//See if this object has a texture					var viewString:String = itemXML.texture_filename.toString();					if (viewString != "")					{						//Create known params for a GLEED2D "texture"						var originX:Number = itemXML.Origin.X.toString();						var originY:Number = itemXML.Origin.Y.toString();						var rotation:Number = Number(itemXML.Rotation.toString()) * 180 / Math.PI;						object = {x: x, y: y, width: originX * 2, height: originY * 2, rotation: rotation, registration: "center"};						viewString = Replace(viewString, "\\", "/"); //covert backslashes to forward slashes						object.view = viewString;					}					else					{						//Create known params for a GLEED2D "primitive"						var width:Number = itemXML.Width.toString();						var height:Number = itemXML.Height.toString();												object = {x: x + (width / 2), y: y + (height / 2), width: width, height: height};					}										//Covert GLEED layer index to a property on the object.					if (layerIndexProperty)						object[layerIndexProperty] = layerIndex;										//Add the custom properties					var className:String = defaultClassName;					for each (var customPropXML:XML in itemXML.CustomProperties.Property)					{						if (customPropXML.@Name.toString() == "className")							className = customPropXML.string.toString();						else							object[customPropXML.@Name.toString()] = customPropXML.string.toString();					}										//Make the CitrusObject and add it to the current state.					var citrusClass:Class = getDefinitionByName(className) as Class;					var citrusObject:CitrusObject = new citrusClass(objectName, object);					if (addToCurrentState)						ce.state.add(citrusObject);				}				layerIndex++;			}			return items;		}				private static function Replace(str:String, fnd:String, rpl:String):String{			return str.split(fnd).join(rpl);		}	}}